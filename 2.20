import { useState, useEffect } from 'react'
import axios from 'axios'

const API_KEY = '649b16a7f16b6ff0deab564b8d7a6738' 

const App = () => {
  const [countries, setCountries] = useState([])
  const [filter, setFilter] = useState('')
  const [selectedCountry, setSelectedCountry] = useState(null)

  useEffect(() => {
    axios
      .get('https://studies.cs.helsinki.fi/restcountries/api/all')
      .then((response) => setCountries(response.data))
      .catch((error) => {
        console.error('Failed to fetch countries:', error)
      })
  }, [])

  const handleFilterChange = (event) => {
    setFilter(event.target.value)
    setSelectedCountry(null)
  }

  const filteredCountries = countries.filter((country) =>
    country.name.common.toLowerCase().includes(filter.toLowerCase())
  )

  //  Haetaan ja näytetään pääkaupungin säätiedot
  const Weather = ({ capital }) => {
    const [weather, setWeather] = useState(null)
    const [error, setError] = useState(null)

    useEffect(() => {
      if (!capital) return

      // Haetaan sää OpenWeatherMapista
      const url = `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(
        capital
      )}&appid=${API_KEY}&units=metric`

      axios
        .get(url)
        .then((response) => {
          setWeather(response.data)
          setError(null)
        })
        .catch((err) => {
          console.error('Failed to fetch weather:', err)
          setError('Failed to load weather data')
          setWeather(null)
        })
    }, [capital])

    if (error) {
      return <p>{error}</p>
    }

    if (!weather) {
      return <p>Loading weather...</p>
    }

    return (
      <div>
        <h3>Weather in {capital}</h3>
        <p>Temperature: {weather.main.temp} °C</p>
        <p>Wind: {weather.wind.speed} m/s</p>
        <p>
          <img
            src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}
            alt={weather.weather[0].description}
          />
        </p>
        <p>{weather.weather[0].description}</p>
      </div>
    )
  }

  // Näytetään maan tiedot ja säätiedot
  const CountryDetails = ({ country }) => {
    const languages = country.languages
      ? Object.values(country.languages)
      : []

    // Otetaan pääkaupunki talteen (voi olla undefined)
    const capital = country.capital ? country.capital[0] : null

    return (
      <div>
        <h2>{country.name.common}</h2>
        <p>Capital: {capital || 'N/A'}</p>
        <p>Population: {country.population.toLocaleString()}</p>
        <h3>Languages:</h3>
        <ul>
          {languages.map((lang) => (
            <li key={lang}>{lang}</li>
          ))}
        </ul>
        <img
          src={country.flags.png}
          alt={`Flag of ${country.name.common}`}
          width="150"
        />
        {/* Näytetään sää vain jos pääkaupunki on tiedossa */}
        {capital && <Weather capital={capital} />}
      </div>
    )
  }

  return (
    <div>
      <h1>Country search</h1>
      <div>
        Find countries: <input value={filter} onChange={handleFilterChange} />
      </div>

      {filter === '' ? (
        <p>Type something to search countries</p>
      ) : filteredCountries.length > 10 ? (
        <p>Too many matches, specify another filter.</p>
      ) : selectedCountry ? (
        <CountryDetails country={selectedCountry} />
      ) : filteredCountries.length === 1 ? (
        <CountryDetails country={filteredCountries[0]} />
      ) : (
        <ul>
          {filteredCountries.map((country) => (
            <li key={country.cca3}>
              {country.name.common}{' '}
              <button onClick={() => setSelectedCountry(country)}>show</button>
            </li>
          ))}
        </ul>
      )}
    </div>
  )
}

export default App
